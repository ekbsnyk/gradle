buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.+'
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'org.liquibase.gradle' version '2.0.2'
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group = 'nl.flowride'
version = '0.0.1-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_11

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

apply plugin: 'com.google.cloud.tools.appengine'

appengine {
	deploy {
		version = "GCLOUD_CONFIG"
		projectId = "GCLOUD_CONFIG"
	}
}

dependencies {
	// Todo: check if all these dependencies need to be imported as implementation
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas:2.3.1.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-security:2.3.1.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.3.1.RELEASE'
	implementation 'com.h2database:h2:1.+'
	implementation 'org.liquibase:liquibase-core:3.+'
	implementation 'javax.validation:validation-api:2.+'
	implementation 'org.springframework.cloud:spring-cloud-gcp-starter:1.+'
	implementation 'org.springframework.cloud:spring-cloud-gcp-starter-sql-mysql:1.+'

	implementation 'com.google.firebase:firebase-admin:6.14.0'

	implementation 'org.springdoc:springdoc-openapi-ui:1.4.2'
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.4.2'
	compileOnly 'org.springframework.data:spring-data-rest-webmvc:3.3.0.RELEASE'

	/* Documenting this shit before stashing it:
	* When Liquibase works, please trim this list of liquibaseRuntime dependencies because we don't need all
	* They're just there because it's helpful in debugging and trying different strategies to make Liquibase work
	* Awaiting: https://github.com/liquibase/liquibase/issues/1089
	* */
	compile 'io.sentry:sentry-spring:1.7.30'
	liquibaseRuntime 'org.liquibase:liquibase-core:3.+'
	liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.+'
	liquibaseRuntime 'com.h2database:h2:1.+'
	liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:3.+'
	liquibaseRuntime 'ch.qos.logback:logback-core:1.+'
	liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa:2.+'
	liquibaseRuntime 'org.projectlombok:lombok:1.+'
	liquibaseRuntime 'org.liquibase:liquibase-gradle-plugin:2.+'
	liquibaseRuntime sourceSets.main.output

	compileOnly 'org.projectlombok:lombok:1.+'
	annotationProcessor 'org.projectlombok:lombok:1.+'

	testImplementation('org.springframework.boot:spring-boot-starter-test:2.+') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test:5.+'
}

diff.dependsOn assemble
diffChangeLog.dependsOn assemble

liquibase {
	mainClassName 'org.liquibase.gradle.OutputEnablingLiquibaseRunner'
	activities {
		//noinspection GroovyAssignabilityCheck
		main {
			changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
			url 'jdbc:h2:mem:liquibase;FILE_LOCK=NO;MODE=MySQL;'
			username 'sa'
			password ''
			referenceUrl 'hibernate:spring:nl.flowride?dialect=org.hibernate.dialect.MySQLDialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
		}
	}
	runList = 'main'
}

wrapper {
	gradleVersion = '6.5' // When upgrading, please check bitbucket-pipeline-download-gradlew.sh and update the checksum there (documentation also there)
	distributionType = Wrapper.DistributionType.BIN
	distributionBase = Wrapper.PathBase.PROJECT
	distributionPath = 'gradle/dists'
	archiveBase = Wrapper.PathBase.PROJECT
	archivePath = 'gradle/dists'
}

test {
	useJUnitPlatform()
}

// Configuration for logging test results
// Source https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
// Source https://stackoverflow.com/a/36130467
tasks.withType(Test) {
	testLogging {
		// set options for log level LIFECYCLE
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED//,
		//TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		// set options for log level DEBUG and INFO
		//noinspection GroovyAssignabilityCheck
		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}
